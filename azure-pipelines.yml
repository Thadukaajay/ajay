parameters:
- name: Clientcode
  displayName: Client Code
  type: string
  default: ''
- name: username
  displayName: UserName
  type: string
  default: ''
trigger:
  branches:
    include:
    - None
name: aptg.athompson
# pr:
#   enabled: none
stages:
- stage: ''
  displayName: Add User to SCALE
  jobs:
  - job: getkey
    pool:
      name: Hosted Windows 2019 with VS2019
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Mindtree_Azure_DevOps (e9735a76-e0fb-4c01-b485-f95afa5949d0)'
        scriptType: 'ps'
        scriptLocation: 'scriptPath'
        scriptPath: 'getSecret.ps1'
        failOnStandardError: true
      enabled: false
    - task: AzurePowerShell@5
      displayName: key
      inputs:
        azureSubscription: 'Mindtree_Azure_DevOps (e9735a76-e0fb-4c01-b485-f95afa5949d0)'
        ScriptType: 'InlineScript'
        Inline: |
          function SendEmail {
              # Your email sending function here
          }
          
          $secret = Get-AzKeyVaultSecret -VaultName "ajay1" -Name "ajay" -AsPlainText
              
          if ($secret.Length -lt 5) {
              SendEmail
              Write-Error "Key not present in the key vault. Email sent..." -ErrorAction Stop
          }else {
              Write-Host "##vso[task.setvariable variable=YourVariable;isoutput=true]$secret"
          }
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
      name: key
  - deployment: ''
    dependsOn:
    - getKey
    variables:
    - name: myKey
      value: $[ dependencies.getKey.outputs['key.YourVariable'] ]
    environment:
      name: SCALE STAGE SERVERS 2023
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: "#Created by Clayton Thompson\nimport-module \"C:\\ManhattanAssociates\\ManhattanSCALE\\bin\\ActiveSCALEPowerShell.dll\"\n\n$hostname = hostname\n$baseenvirname = \"aptg\"\n$baseenvirname = $baseenvirname.Trim()\n$environmentnamewildcard = $baseenvirname + \"*\"\n$username = \"athompson\"\n\nif ($hostname -like \"st*\") { \n    $baseenvirname = $baseenvirname + \"stg\"\n}elseif ($hostname -like \"qt*\") {\n    $baseenvirname = $baseenvirname + \"qa\"\n}\nif( $hostname -like '*web*'){\n  #try {\n  #    $results = @(Get-ScaleEnvironments)\n  #    $presentenvs = $results -split \" \"\n  #}\n  #catch {\n  #  $presentenvs = $environmentnamewildcard\n  #    Write-Host \"Get-SCALEEnvironments command failed\"\n  #}\n  \n    if (($presentenvs -like $environmentnamewildcard) -or (hostname -like \"*f6\")) {\n        write-host $baseenvirname \"is present on this server. Continuing to add user...\"\n      $email = -join ($username, \"@manh.com\")\n        Add-ScaleUser -UserName $username -EnvironmentName $baseenvirname -Warehouse '' -ManhSignature $(mykey)  -EmailAddress $email\n        Add-ScaleEnvironmentUserAuthority -EnvironmentName $baseenvirname -UserName $username\n    }else {\n      write-host $baseenvirname \"is NOT present on this server. Cancelling install...\"\n      exit\n    }\n    \n}else{\n    Write-Error \"Server is not a Web server. Exiting...\"\n    exit\n}\n"
              failOnStderr: false
  - deployment: ''
    dependsOn:
    - getkey
    variables:
    - name: mykey
      value: $[ dependencies.getkey.outputs['key.MANHKey'] ]
    environment:
      name: SCALE PROD SERVERS 2023
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: "#Created by Clayton Thompson\nimport-module \"C:\\ManhattanAssociates\\ManhattanSCALE\\bin\\ActiveSCALEPowerShell.dll\"\n$hostname = hostname\n$baseenvirname = \"aptg\"\n$baseenvirname = $baseenvirname.Trim()\n$environmentnamewildcard = $baseenvirname + \"*\"\n$username = \"athompson\"\n#$username = $username.ToString()\n\nif ($hostname -like \"st*\") { \n    $baseenvirname = $baseenvirname + \"stg\"\n}elseif ($hostname -like \"qt*\") {\n    $baseenvirname = $baseenvirname + \"qa\"\n}\n\nif( $hostname -like '*web*'){\n  #try {\n      $results = @(Get-ScaleEnvironments)\n  #}\n  #catch {\n  #    Write-Host \"Get-SCALEEnvironments command failed\"\n  #}\n    $presentenvs = $results -split \" \"\n    if ($presentenvs -like $environmentnamewildcard) {\n        write-host $baseenvirname \"is present on this server. Continuing to add user...\"\n      $email = -join ($username, \"@manh.com\")\n        Add-ScaleUser -UserName $username -EnvironmentName $baseenvirname -Warehouse '' -ManhSignature $(mykey)  -EmailAddress $email\n        Add-ScaleEnvironmentUserAuthority -EnvironmentName $baseenvirname -UserName $username\n    }else {\n      write-host $baseenvirname \"is NOT present on this server. Cancelling install...\"\n      exit\n    }\n    \n}else{\n    Write-Error \"Server is not a Web server. Exiting...\"\n    exit\n}\n"
              failOnStderr: false

